"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Answer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  survey: Survey!
  user: User!
  results: [String!]!
  answersConnection(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): AnswersConnection!
}

type AnswerEdge {
  cursor: DateTime!
  node: Answer!
}

type AnswersConnection {
  edges: [AnswerEdge!]!
  pageInfo: PageInfo!
}

type ChartFormatResult {
  labels: [String!]!
  series: [Float!]!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  user: User!
  post: Post!
  isMyComment: Boolean!
}

type CommentEdge {
  cursor: DateTime!
  node: Comment!
}

type CommentsConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

type Confirm {
  byCeo: Boolean!
  byLeader: Boolean!
  byManager: Boolean!
}

input ConfirmVacationInput {
  id: ID!
}

type ConfirmVacationOutput {
  ok: Boolean!
  error: String
  vacation: Vacation
}

input CreateAnswerInput {
  results: [String!]!
  surveyId: ID!
}

type CreateAnswerOutput {
  ok: Boolean!
  error: String
  answer: Answer
  surveyId: ID
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

type CreateCommentOutput {
  ok: Boolean!
  error: String
  comment: Comment
  postId: ID
}

input CreateMeetingInput {
  title: String!
  startTime: DateTime!
  endTime: DateTime!
  attendeesIds: [ID!]
}

type CreateMeetingOutput {
  ok: Boolean!
  error: String
  meeting: Meeting
}

input CreatePositionInput {
  position: String!
}

type CreatePositionOutput {
  ok: Boolean!
  error: String
  position: Position
}

input CreatePostInput {
  title: String!
  content: String!
}

type CreatePostOutput {
  ok: Boolean!
  error: String
  edge: PostEdge!
}

input CreateSurveyInput {
  surveyTitle: String!
  isAnonymous: Boolean! = false
  paragraphs: [SurveyFormInputType!]!
}

type CreateSurveyOutput {
  ok: Boolean!
  error: String
  edge: SurveyEdge!
}

input CreateTeamInput {
  team: String!
}

type CreateTeamOutput {
  ok: Boolean!
  error: String
  team: Team
}

input CreateUserInput {
  email: String!
  name: String!
  joinDate: DateTime!
  positionId: ID!
  teamId: ID!
}

type CreateUserOutput {
  ok: Boolean!
  error: String
  edge: UserEdge!
}

input CreateVacationInput {
  startDate: DateTime!
  endDate: DateTime!
  isHalf: Boolean! = false
}

type CreateVacationOutput {
  ok: Boolean!
  error: String
  vacation: Vacation
}

input CreateWeeklyMealInput {
  excelToJson: String!
}

type CreateWeeklyMealOutput {
  ok: Boolean!
  error: String
  weeklyMeal: Meal
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteAnswerInput {
  id: ID!
}

type DeleteAnswerOutput {
  ok: Boolean!
  error: String
  deletedAnswerId: ID
}

input DeleteCommentInput {
  id: ID!
}

type DeleteCommentOutput {
  ok: Boolean!
  error: String
  deletedCommentId: ID
  postId: ID
}

input DeleteMeetingInput {
  id: ID!
}

type DeleteMeetingOutput {
  ok: Boolean!
  error: String
  deletedMeetingId: ID
}

input DeletePositionInput {
  id: ID!
}

type DeletePositionOutput {
  ok: Boolean!
  error: String
  deletedPositionId: ID
}

input DeletePostInput {
  id: ID!
}

type DeletePostOutput {
  ok: Boolean!
  error: String
  deletedPostId: ID
}

input DeleteSurveyInput {
  id: ID!
}

type DeleteSurveyOutput {
  ok: Boolean!
  error: String
  deletedSurveyId: ID
}

input DeleteTeamInput {
  id: ID!
}

type DeleteTeamOutput {
  ok: Boolean!
  error: String
  deletedTeamId: ID
}

input DeleteUserInput {
  id: ID!
}

type DeleteUserOutput {
  ok: Boolean!
  error: String
  deletedUserId: ID
}

input DeleteVacationInput {
  id: ID!
}

type DeleteVacationOutput {
  ok: Boolean!
  error: String
  deletedVacationId: ID
}

type GetAnswersOfSurveyOutput {
  ok: Boolean!
  error: String
  survey: Survey
}

input GetMeetingInput {
  id: ID!
}

type GetMeetingOutput {
  ok: Boolean!
  error: String
  meeting: Meeting
}

type GetMeetingsOutput {
  ok: Boolean!
  error: String
  meetings: [Meeting!]
}

type GetMyInfoOutput {
  ok: Boolean!
  error: String
  user: User
}

input GetPositionInput {
  id: ID!
}

type GetPositionOutput {
  ok: Boolean!
  error: String
  position: Position
}

type GetPositionsOutput {
  ok: Boolean!
  error: String
  positions: [Position!]
}

input GetPostInput {
  id: ID!
}

type GetPostOutput {
  ok: Boolean!
  error: String
  post: Post
}

type GetPostsOutput {
  ok: Boolean!
  error: String
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

input GetSurveyInput {
  id: ID!
}

type GetSurveyOutput {
  ok: Boolean!
  error: String
  survey: Survey
}

type GetSurveysOutput {
  ok: Boolean!
  error: String
  edges: [SurveyEdge!]!
  pageInfo: PageInfo!
}

input GetTeamInput {
  id: ID!
}

type GetTeamOutput {
  ok: Boolean!
  error: String
  team: Team
}

type GetTeamsOutput {
  ok: Boolean!
  error: String
  teams: [Team!]
}

type GetUnConfirmedByMeVacationsOutput {
  ok: Boolean!
  error: String
  vacations: [Vacation!]
}

type GetUserOutput {
  ok: Boolean!
  error: String
  user: User
}

type GetUsersOutput {
  ok: Boolean!
  error: String
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input GetVacationInput {
  id: ID!
}

type GetVacationOutput {
  ok: Boolean!
  error: String
  vacation: Vacation
}

type GetVacationsOutput {
  ok: Boolean!
  error: String
  vacations: [Vacation!]
}

type GetWeeklyMealOutput {
  ok: Boolean!
  error: String
  weeklyMeal: Meal
}

type Like {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  post: Post!
}

type LikeEdge {
  cursor: DateTime!
  node: Like!
}

type LikesConnection {
  edges: [LikeEdge!]!
  pageInfo: PageInfo!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type Meal {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  mon: [String!]!
  tue: [String!]!
  wed: [String!]!
  thu: [String!]!
  fri: [String!]!
}

type Meeting {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  startTime: DateTime!
  endTime: DateTime!
  attendees: [User!]!
  host: User!
}

type MultipleChoiceFormat {
  paragraphTitle: String!
  description: String!
  chartFormatResults: ChartFormatResult!
}

type Mutation {
  login(input: LoginInput!): LoginOutput!
  createUser(input: CreateUserInput!): CreateUserOutput!
  updateUser(input: UpdateUserInput!): UpdateUserOutput!
  updateUserPassword(input: UpdateUserPasswordInput!): UpdateUserPasswordOutput!
  deleteUser(input: DeleteUserInput!): DeleteUserOutput!
  createPosition(input: CreatePositionInput!): CreatePositionOutput!
  updatePosition(input: UpdatePositionInput!): UpdatePositionOutput!
  deletePosition(input: DeletePositionInput!): DeletePositionOutput!
  createTeam(input: CreateTeamInput!): CreateTeamOutput!
  updateTeam(input: UpdateTeamInput!): UpdateTeamOutput!
  deleteTeam(input: DeleteTeamInput!): DeleteTeamOutput!
  createVacation(input: CreateVacationInput!): CreateVacationOutput!
  confirmVacation(input: ConfirmVacationInput!): ConfirmVacationOutput!
  updateVacation(input: UpdateVacationInput!): UpdateVacationOutput!
  deleteVacation(input: DeleteVacationInput!): DeleteVacationOutput!
  createSurvey(input: CreateSurveyInput!): CreateSurveyOutput!
  deleteSurvey(input: DeleteSurveyInput!): DeleteSurveyOutput!
  createAnswer(input: CreateAnswerInput!): CreateAnswerOutput!
  deleteAnswer(input: DeleteAnswerInput!): DeleteAnswerOutput!
  createPost(input: CreatePostInput!): CreatePostOutput!
  updatePost(input: UpdatePostInput!): UpdatePostOutput!
  deletePost(input: DeletePostInput!): DeletePostOutput!
  toggleLike(input: ToggleLikeInput!): ToggleLikeOutput!
  createComment(input: CreateCommentInput!): CreateCommentOutput!
  deleteComment(input: DeleteCommentInput!): DeleteCommentOutput!
  createMeeting(input: CreateMeetingInput!): CreateMeetingOutput!
  updateMeeting(input: UpdateMeetingInput!): UpdateMeetingOutput!
  deleteMeeting(input: DeleteMeetingInput!): DeleteMeetingOutput!
  createWeeklyMeal(input: CreateWeeklyMealInput!): CreateWeeklyMealOutput!
}

interface Node {
  id: ID!
}

input Orders {
  order1: [String!]
  order2: [String!]
  order3: [String!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: DateTime
  endCursor: DateTime
}

type Position {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  position: String!
  users: [User!]!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  user: User!
  likes: [Like!]!
  comments: [Comment!]!
  isMyPost: Boolean!
  countLikes: Float!
  isLiked: Boolean!
  countComments: Float!
}

type PostEdge {
  cursor: DateTime!
  node: Post!
}

type PostsConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type Query {
  getUsers(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): GetUsersOutput!
  getUser(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10, userId: ID!): GetUserOutput!
  getMyInfo(isAllInfo: Boolean = false): GetMyInfoOutput!
  node(id: ID!): Node!
  getPositions: GetPositionsOutput!
  getPosition(input: GetPositionInput!): GetPositionOutput!
  getTeams: GetTeamsOutput!
  getTeam(input: GetTeamInput!): GetTeamOutput!
  getVacations: GetVacationsOutput!
  getUnConfirmedByMeVacations: GetUnConfirmedByMeVacationsOutput!
  getVacation(input: GetVacationInput!): GetVacationOutput!
  getSurveys(onlyMine: Boolean, keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): GetSurveysOutput!
  getSurvey(input: GetSurveyInput!): GetSurveyOutput!
  getAnswersOfSurvey(surveyId: ID!): GetAnswersOfSurveyOutput!
  getPosts(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): GetPostsOutput!
  getPost(input: GetPostInput!): GetPostOutput!
  getMeetings: GetMeetingsOutput!
  getMeeting(input: GetMeetingInput!): GetMeetingOutput!
  getWeeklyMeal: GetWeeklyMealOutput!
}

type ResponseRate {
  notAnsweredEmployeeCount: Float!
  answeredEmployeeCount: Float!
}

type ShortAnswerFormat {
  paragraphTitle: String!
  description: String!
  shortAnswers: [ShortAnswersFormat!]!
}

type ShortAnswersFormat {
  result: String!
  user: User!
}

type Survey implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  surveyTitle: String!
  isAnonymous: Boolean!
  paragraphs: [SurveyForm!]!
  answers: [Answer!]!
  user: User!
  responseRate: ResponseRate!
  multipleChoiceFormat: [MultipleChoiceFormat!]!
  shortAnswerFormat: [ShortAnswerFormat!]!
  isMySurvey: Boolean!
  isAnswered: Boolean!
}

type SurveyEdge {
  cursor: DateTime!
  node: Survey!
}

type SurveyForm {
  paragraphTitle: String!
  description: String
  multipleChoice: [String!]!
}

input SurveyFormInputType {
  paragraphTitle: String!
  description: String
  multipleChoice: [String!]!
}

type Team {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  team: String!
  users: [User!]!
  leader: User
}

input ToggleLikeInput {
  postId: ID!
}

type ToggleLikeOutput {
  ok: Boolean!
  error: String
  like: Like
}

input UpdateMeetingInput {
  title: String
  startTime: DateTime
  endTime: DateTime
  meetingId: ID!
  attendeesIds: [ID!]
}

type UpdateMeetingOutput {
  ok: Boolean!
  error: String
  meeting: Meeting
}

input UpdatePositionInput {
  id: ID!
  position: String!
}

type UpdatePositionOutput {
  ok: Boolean!
  error: String
  position: Position
}

input UpdatePostInput {
  title: String
  content: String
  postId: ID!
}

type UpdatePostOutput {
  ok: Boolean!
  error: String
  post: Post
}

input UpdateTeamInput {
  team: String
  teamId: ID!
  leaderId: ID
}

type UpdateTeamOutput {
  ok: Boolean!
  error: String
  team: Team
}

input UpdateUserInput {
  isManager: Boolean = false
  email: String
  password: String
  name: String
  joinDate: DateTime
  userId: ID!
  positionId: ID
  teamId: ID
  availableVacation: String
}

type UpdateUserOutput {
  ok: Boolean!
  error: String
  user: User
}

input UpdateUserPasswordInput {
  password: String!
}

type UpdateUserPasswordOutput {
  ok: Boolean!
  error: String
}

input UpdateVacationInput {
  startDate: DateTime
  endDate: DateTime
  isHalf: Boolean = false
  vacationId: ID!
}

type UpdateVacationOutput {
  ok: Boolean!
  error: String
  vacation: Vacation
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isManager: Boolean!
  email: String!
  password: String!
  name: String!
  joinDate: DateTime!
  availableVacation: String!
  vacations: [Vacation!]!
  attendedMeetings: [Meeting!]!
  hostedMeetingsByMe: [Meeting!]!
  position: Position!
  team: Team!
  posts: [Post!]!
  likes: [Like!]!
  comments: [Comment!]!
  surveys: [Survey!]!
  answers: [Answer!]!
  myAnswersConnection(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): AnswersConnection!
  myVacationsConnection(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): VacationsConnection!
  myPostsConnection(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): PostsConnection!
  myLikesConnection(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): LikesConnection!
  myCommentsConnection(keyword: String, orders: Orders, after: DateTime, before: DateTime, first: Int! = 10, last: Int! = 10): CommentsConnection!
  isLeader: Boolean!
}

type UserEdge {
  cursor: DateTime!
  node: User!
}

type Vacation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  isHalf: Boolean!
  duration: Float!
  confirmed: Confirm!
  user: User!
}

type VacationEdge {
  cursor: DateTime!
  node: Vacation!
}

type VacationsConnection {
  edges: [VacationEdge!]!
  pageInfo: PageInfo!
}

